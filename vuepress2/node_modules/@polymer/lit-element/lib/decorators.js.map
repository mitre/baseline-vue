{"version":3,"file":"decorators.js","sourceRoot":"","sources":["../src/lib/decorators.ts"],"names":[],"mappings":"AACA;;;;;;;;;;;;GAYG;AAUH;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,OAAe,EAAE,EAAE,CAC7C,CAAC,KAA+B,EAAE,EAAE;IAClC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAC7C,sEAAsE;IACtE,wDAAwD;IACxD,yEAAyE;IACzE,wEAAwE;IACxE,OAAO,KAAY,CAAC;AACtB,CAAC,CAAC;AAEN;;;;GAIG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,OAA6B,EAAE,EAAE,CAAC,CAAC,KAAa,EACb,IAAiB,EAAE,EAAE;IAC9E,KAAK,CAAC,WAAsC,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AAC9E,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,MAAoB,EAAE,QAAgB,EAAE,EAAE,CACvC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;AAEhE;;;GAGG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,MAAoB,EAAE,QAAgB,EAAE,EAAE,CACvC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;AAEtE;;;;;GAKG;AACH,SAAS,MAAM,CAAI,OAAsD;IACvE,OAAO,CAAC,QAAgB,EAAE,EAAE,CAAC,CAAC,KAAU,EAAE,QAAgB,EAAE,EAAE;QAC5D,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,QAAQ,EAAE;YACrC,GAAG,KAAqB,OAAO,OAAO,CAAC,IAAI,CAAC,UAAW,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;YACrE,UAAU,EAAG,IAAI;YACjB,YAAY,EAAG,IAAI;SACpB,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,OAA6B,EAAE,EAAE,CAC1D,CAAC,KAAU,EAAE,IAAY,EAAE,EAAE;IAC3B,0EAA0E;IAC1E,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;AACtC,CAAC,CAAC","sourcesContent":["\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {LitElement} from '../lit-element.js';\n\nimport {PropertyDeclaration, UpdatingElement} from './updating-element.js';\n\nexport type Constructor<T> = {\n  new (...args: any[]): T\n};\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n *\n * In TypeScript, the `tagName` passed to `customElement` should be a key of the\n * `HTMLElementTagNameMap` interface. To add your element to the interface,\n * declare the interface in this module:\n *\n *     @customElement('my-element')\n *     export class MyElement extends LitElement {}\n *\n *     declare global {\n *       interface HTMLElementTagNameMap {\n *         'my-element': MyElement;\n *       }\n *     }\n *\n */\nexport const customElement = (tagName: string) =>\n    (clazz: Constructor<HTMLElement>) => {\n      window.customElements.define(tagName, clazz);\n      // Cast as any because TS doesn't recognize the return type as being a\n      // subtype of the decorated class when clazz is typed as\n      // `Constructor<HTMLElement>` for some reason. `Constructor<HTMLElement>`\n      // is helpful to make sure the decorator is applied to elements however.\n      return clazz as any;\n    };\n\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n */\nexport const property = (options?: PropertyDeclaration) => (proto: Object,\n                                                            name: PropertyKey) => {\n  (proto.constructor as typeof UpdatingElement).createProperty(name, options);\n};\n\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n */\nexport const query = _query((target: NodeSelector, selector: string) =>\n                                target.querySelector(selector));\n\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n */\nexport const queryAll = _query((target: NodeSelector, selector: string) =>\n                                   target.querySelectorAll(selector));\n\n/**\n * Base-implementation of `@query` and `@queryAll` decorators.\n *\n * @param queryFn exectute a `selector` (ie, querySelector or querySelectorAll)\n * against `target`.\n */\nfunction _query<T>(queryFn: (target: NodeSelector, selector: string) => T) {\n  return (selector: string) => (proto: any, propName: string) => {\n    Object.defineProperty(proto, propName, {\n      get(this: LitElement) { return queryFn(this.renderRoot!, selector); },\n      enumerable : true,\n      configurable : true,\n    });\n  };\n}\n\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options: EventListenerOptions) =>\n    (proto: any, name: string) => {\n      // This comment is here to fix a disagreement between formatter and linter\n      Object.assign(proto[name], options);\n    };\n"]}